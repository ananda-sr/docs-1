Quick Start Guide
=================
Quick start guide to create a new daemon within flexswitch

.. image:: images/daemon.png

Lets show by an example of creating a EXAMPLE Daemon in the l2 repo.  Each section assumes that you start
from snaproute/src directory

Create Model Objects
^^^^^^^^^^^^^^^^^^^^
Create a model object in the following repo models/objects

File name for the below example **exampleObjects.go**

Example

::
 
    type Example struct {                                                                                                                                            
        baseObj                                                                                                                                                      
        VlanId        int32    `SNAPROUTE: "KEY", ACCESS:"w", MULTIPLICITY: "*", MIN:"1", MAX: "4094", DESCRIPTION: "802.1Q tag/Vlan ID for vlan being provisioned"`  
        IntfList      []string `DESCRIPTION: "List of interface names or ifindex values to  be added as tagged members of the vlan"`                                 
        UntagIntfList []string `DESCRIPTION: "List of interface names or ifindex values to  be added as untagged members of the vlan"`                               
    }                                                                                                                                                                


Add Model Object to Daemon Map
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Ensure that this object has an owner and path to store the thrift generated file.

Add the following lines to **models/objects/goObjinfo.json** before localObjects entry

Example

::

    "exampleOjects.go" :  {"owner":     "exampled",          
                           "location" : "l2/example/rpc",
                           "svcName"  : "nil"},           

Create Module and subdirectories 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Setup the directories for use by you module

Example in L2 Repo

::

    cd l2/example 
    mkdir rpc
    mkdir client
    mkdir hal
    mkdir server
    mkdir protocol
    
Add module to thirft client handle
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Add the following lines to **config/clientmap/clientmap.go**

Example

::

    "exampled":    &EXAMPLEDClient{},

Add module to client port list
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Add the module to the json containing the client port list used for RPC 
**config/params/clients.json**

Number should not conflict with any other port within the json.

Example

::

    {"Name":"exampled",
     "Port":10017},

Build Vlan Daemon Autogenerated Code
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Example

::
    
    make codegen                                                      
    make ipc                                                          

Verify Components build properly
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- Verify that within your module rpc directory that there is a thrift file **exampled.thrift** that is created
- Verify in models/objects that you see something similar to the following
    - gen_Exampledbif.go
    - gen_exampledObjects_serializer.go
    - gen_exampledthriftutil.go
- Verify FlexSdk repo to see if api was generated for the above Objects in **flexprintV2.py** and **flexSwitchV2.py**


Create Main
^^^^^^^^^^^

Filename **example/main.go**

Example

::
    

    package main                                                                    
                                                                                    
    import (                                                                        
       "l2/example/server"                                                          
       "l2/rpc"                                                                     
       "utils/dmnBase"                                                              
    )                                                                               
                                                                                    
    const (                                                                         
      EXAMPLED_DMN_NAME = "EXAMPLED"                                                
      EXAMPLED_CFG_FILE = "example.conf"                                            
      EXAMPLED_DEFAULT_RPC_SERVER_ADDR = "loaclhost:10017"                          
    )                                                                               
                                                                                    
    type opticDaemon struct {                                                       
       *dmnBase.FSBaseDmn                                                          
       exampleServer *server.ExampleDServer                                        
       rpcServer *rpc.RPCServer                                                    
     }                                                                               
                                                                                    
    var dmn exampleDaemon                                                           
                                                                                    
    func main() {                                                                   
       dmn.FSBaseDmn = dmnBase.NewBaseDmn(EXAMPLE_DMN_NAME, EXAMPLE_DMN_NAME)       
       ok := dmn.Init()                                                             
       if !ok {                                                                     
           panic("Example Daemon Base initialization failed")                       
       }                                                                            
                                                                                     
       cfgFileName := dmn.ParamsDir + EXAMPLE_CFG_FILE                              
       serverInitParams := &server.ServerInitParams{                                
           DmnName:   EXAMPLED_DMN_NAME,                                            
           ParamsDir: dmn.ParamsDir,                                                
           DbHdl:     dmn.DbHdl,                                                    
           Logger:    dmn.FSBaseDmn.Logger,                                         
       }                                                                            
       dmn.server = server.NewExampleServer(serverInitParams)                       
       go dmn.exampleServer.Serve()                                                 
                                                                                    
       var rpcServerAddr string = EXAMPLED_DEFAULT_RPC_SERVER_ADDR                  
       for _, value := range dmn.FSBaseDmn.ClientsList {                            
           if value.Name == strings.ToLower(EXAMPLED_DMN_NAME) {                    
               rpcServerAddr = "localhost:" + strconv.Itoa(value.Port)              
               break                                                                
           }                                                                        
       }                                                                            
                                                                                    
       dmn.StartKeepAlive()                                                         
                                                                                     
       //Start RPC server                                                           
       dmn.FSBaseDmn.Logger.Info("Example Daemon Server started")                   
       dmn.rpcServer.Serve()                                                         
       panic("Example Daemon RPC Server terminated")                                
    }                                                                               


Create RPC Server
^^^^^^^^^^^^^^^^^
Create RPC Server to intercept RPC calls from Client

Filename **example/rpc/rpc.go**

Example

::
    
    package rpc                                                                                    
                                                                                                    
    import (                                                                                        
        "git.apache.org/thrift.git/lib/go/thrift"                                                   
        "exampledServices"                                                                          
        "utils/logging"                                                                             
    )                                                                                               
                                                                                                     
    type rpcServiceHandler struct {                                                                 
        logger logging.LoggerIntf                                                                   
    }                                                                                               
                                                                                                    
    func newRPCServiceHandler(logger logging.LoggerIntf) *rpcServiceHandler {                      
        return &rpcServiceHandler{                                                                  
             logger: logger,                                                                         
        }                                                                                           
    }                                                                                               
                                                                                                     
    type RPCServer struct {                                                                         
        *thrift.TSimpleServer                                                                      
    }                                                                                               
                                                                                                    
    func NewRPCServer(rpcAddr string, logger logging.LoggerIntf) \*RPCServer {                      
        transport, err := thrift.NewTServerSocket(rpcAddr)                                          
        if err != nil {                                                                             
            panic(err)                                                                              
        }                                                                                           
        handler := newRPCServiceHandler(logger)                                                     
        processor := opticdServices.NewOPTICDServicesProcessor(handler)                             
        transportFactory := thrift.NewTBufferedTransportFactory(8192)                               
        protocolFactory := thrift.NewTBinaryProtocolFactoryDefault()                                
        server := thrift.NewTSimpleServer4(processor, transport, transportFactory, protocolFactory) 
        return &RPCServer{                                                                          
            TSimpleServer: server,                                                                  
        }                                                                                           
    }                                                                                               

Create RPC Service Handler for Example Object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Create the Create / Delete / Update / Get / GetBulk methods for the handler

Filename **example/rpc/rpcExampleHdl.go**

Example

::

    package rpc                                                                                                                                                    
                                                                                                                                                                   
    import (                                                                                                                                                       
        "errors"                                                                                                                                                   
        "example"                                                                                                                                                  
        "exampledServices"                                                                                                                                         
        "fmt"                                                                                                                                                      
    )                                                                                                                                                              
                                                                                                                                                                   
    func (rpcHdl *rpcServiceHandler) CreateExample(cfg *exampledServices.Example) (bool, error) {                                                                
        rpcHdl.logger(fmt.Println("Calling CreateExample", cfg))                                                                                                   
        return true, nil                                                                                                                                           
    }                                                                                                                                                              
                                                                                                                                                                   
    func (rpcHdl *rpcServiceHandler) UpdateExample(oldCfg, newCfg *exampledServices.Example, attrset []bool, op []*exampledServices.PatchOpInfo) (bool, error) {
        rpcHdl.logger(fmt.Println("Calling UpdateExample", oldCfg, newCfg))                                                                                        
        return true, nil                                                                                                                                           
    }                                                                                                                                                              
                                                                                                                                                                   
    func (rpcHdl \*rpcServiceHandler) DeleteExample(cfg *exampledServices.Example) (bool, error) {                                                                
        rpcHdl.logger(fmt.Println("Calling DeleteExample", cfg))                                                                                                   
        return true, nil                                                                                                                                           
    }                                                                                                                                                              
                                                                                                                                                                   
    func (rpcHdl *rpcServiceHandler) GetExample(moduleId, nwIntfId int8) (obj *exampledServices.Example, err error) {                                            
        return obj, err                                                                                                                                            
    }                                                                                                                                                              
                                                                                                                                                                   
    func (rpcHdl *rpcServiceHandler) GetBulkExample(fromIdx, count exampledServices.Int) (*exampledServices.Example, error) {                                    
        var getBulkInfo exampledServices.ExampleGetInfo                                                                                                            
        //info, err := api.GetBulkExample(int(fromIdx), int(count))                                                                                                
        getBulkInfo.StartIdx = fromIdx                                                                                                                             
        getBulkInfo.EndIdx = exampledServices.Int(info.EndIdx)                                                                                                     
        getBulkInfo.More = info.More                                                                                                                               
        getBulkInfo.Count = exampledServices.Int(len(info.List))                                                                                                   
        // Fill in data, remember to convert back to thrift format                                                                                                 
        //for idx := 0; idx < len(info.List); idx++ {                                                                                                              
        //    getBulkInfo.ExampleList = append(getBulkInfo.ExampleList,                                                                                            
        //    convertToRPCFmtExample(info.List[idx]))                                                                                                              
        //}                                                                                                                                                        
        return &getBulkInfo, err                                                                                                                                   
    }                                                                                                                                                              

Create Module Server
^^^^^^^^^^^^^^^^^^^^
Create server file within ***l2/example/server/server.go***

Example

::

    package example

    type ExampleSvr struct {
        // store info related to server
    }

    type ServerInitParams struct {
        DmnName     string
        ParamsDir   string
        CfgFileName string
        DbHdl       dbutils.DBIntf
        Logger      logging.LoggerIntf
    }

    func NewExampleServer(initParams *ServerInitParams) *OpticdServer {
        svr := ExampleSvr{}

        // setup whatever you need for your server

        return &svr
    }

Create Makefile for your module
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

	RM=rm -f
	RMFORCE=rm -rf
	DESTDIR=$(SR_CODE_BASE)/snaproute/src/out/bin
	GENERATED_IPC=$(SR_CODE_BASE)/generated/src
	IPC_GEN_CMD=thrift
	SRCS=main.go
	#IPC_SRCS=rpc/opticd.thrift
	COMP_NAME=exampled
	GOLDFLAGS=-r /opt/flexswitch/sharedlib
	all:exe
	all:ipc exe
	ipc:
		$(IPC_GEN_CMD) -r --gen go -out $(GENERATED_IPC) $(IPC_SRCS)

	exe: $(SRCS)
		go build -o $(DESTDIR)/$(COMP_NAME) -ldflags="$(GOLDFLAGS)" $(SRCS)

	guard:
	ifndef SR_CODE_BASE
		$(error SR_CODE_BASE is not set)
	endif

	install:
		@echo "OpticD has no files to install"
	clean:guard
		$(RM) $(DESTDIR)/$(COMP_NAME) 
		$(RMFORCE) $(GENERATED_IPC)/$(COMP_NAME)

Add Module to Top Level Repo Makefile
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add the following line to COMPS

	example

Add the following lines to IPCS

	example
	
